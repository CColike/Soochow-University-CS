//=======================================================================================
//文件名称：bubbleSort.s
//功能概要：STM32L432RC 冒泡排序（汇编）程序文件
//版权所有：SD-ARM(sumcu.suda.edu.cn)
//版本更新：2020-04-27 V3.0
//=======================================================================================
    
.include "bubbleSort.inc"
    
.type bubbleSort_down function               //声明main为函数类型
.global bubbleSort_down              	      //将main定义成全局函数，便于芯片初始化之后调用
.type bubbleSort_up function               //声明main为函数类型
.global bubbleSort_up              	      //将main定义成全局函数，便于芯片初始化之后调用
    
//start 函数定义区域
.type  bubbleSort_down, function
.type  bubbleSort_up, function
//end  函数定义区域
    
//-----------------------以下为内部函数存放处---------------------------------
.section .text
//======================================================================
//函数名称：bubbleSort_down
//函数返回：无
//参数说明：r2:用于存储数据的首地址，r6:用于控制冒泡排序外循环的次数
//功能概要：将一数组采用冒泡降序方式进行排列，并返回排序后的数组
//======================================================================
swap:
//（1）保存现场
      push {r0-r7,lr}               //保存现场，pc(lr)入栈
      strb r0,[r3]				  //以一个字节方式存储
      strb r1,[r2]			      //r3＜r4则交换存储位置
//（3）恢复现场
      pop {r0-r7,pc}             //恢复现场，lr出栈到pc
//======================================================================
//函数名称：bubbleSort_down
//函数返回：无
//参数说明：r2:用于存储数据的首地址，r6:用于控制冒泡排序外循环的次数
//功能概要：将一数组采用冒泡降序方式进行排列，并返回排序后的数组
//======================================================================
bubbleSort_down:
//（1）保存现场
    push {r0-r7,lr}               //保存现场，pc(lr)入栈
    ldr r6,=count		  
    ldr r6,[r6]			  //获取count值
//（4）冒泡排序一趟，外层循环次数减1
loop_down_outer:                        //外层循环控制标签
    ldr r2,=array
    sub r6,r6,#1			        //r6=r6-1
    cmp r6,#0				        //比较r6和0的值
    beq end				        //跳转到程序执行处
    mov r5,#0				        //r5=记录当前外层循环的次数
//（5）内层循环用于比较两数并确定是否需要交换位置
loop_down_inner:                         //内层循环控制标签
    ldr r0,[r2]			         //r3=所要比较的第一个数据
    ldr r3,=0x000000FF
    and r0,r0,r3					 //从存储地址取第一个数
    add r1,r2,#1
    ldr r1,[r1]		             //r4所要比较的第二个数据
    and r1,r1,r3					 //从存储地址取第二个数
    cmp r0,r1				         //比较r3、r4的大小
//（5.1）若r3≥r4则跳转到noSwap
    bcs down_noSwap
//（5.2）若r3<r4则无需交换存储位置
    add r3,r2,#1
	bl swap
down_noSwap:                          //无需交换存储位置标签
    add r2,r2,#1			      //r2=r2+1
    add r5,r5,#1			      //r5=外层循环次数+1
    cmp r5,r6				      //比较记录的外层循环次数与实际所需的外层循环次数
    bcc loop_down_inner		      //小于实际所需的外层循环次数则跳转到loop_inner
    b  loop_down_outer		          //跳转到外层循环
//（8）恢复现场
    pop {r0-r7,pc}             //恢复现场，lr出栈到pc
    
//======================================================================
//函数名称：bubbleSort_up
//函数返回：无
//参数说明：r2:用于存储数据的首地址，r6:用于控制冒泡排序外循环的次数
//功能概要：将一数组采用冒泡升序方式进行排列，并返回排序后的数组
//======================================================================
bubbleSort_up:
//（1）保存现场
    push {r0-r7,lr}               //保存现场，pc(lr)入栈
    ldr r6,=count
    ldr r6,[r6]
//（4）冒泡排序一趟，外层循环次数减1
loop_up_outer:                        //外层循环控制标签
    ldr r2,=array
    sub r6,r6,#1			        //r6=r6-1
    cmp r6,#0				        //比较r6和0的值
    beq end				        //跳转到程序执行处
    mov r5,#0				        //r5=记录当前外层循环的次数
//（5）内层循环用于比较两数并确定是否需要交换位置
loop_up_inner:                         //内层循环控制标签
    ldr r0,[r2]			         //r3=所要比较的第一个数据
    ldr r3,=0x000000FF
    and r0,r0,r3					 //从存储地址取第一个数
    add r1,r2,#1
    ldr r1,[r1]		             //r4所要比较的第二个数据
    and r1,r1,r3					 //从存储地址取第二个数
    cmp r0,r1				         //比较r3、r4的大小
//（5.1）若r3≥r4则跳转到noSwap
    bcc up_noSwap
//（5.2）若r3<r4则需交换存储位置
    add r3,r2,#1
    bl swap
up_noSwap:                          //无需交换存储位置标签
    add r2,r2,#1			      //r2=r2+1
    add r5,r5,#1			      //r5=外层循环次数+1
    cmp r5,r6				      //比较记录的外层循环次数与实际所需的外层循环次数
    bcc loop_up_inner		      //小于实际所需的外层循环次数则跳转到loop_inner
    b  loop_up_outer		          //跳转到外层循环
end:                             //程序执行结束标签
//（8）恢复现场
    pop {r0-r7,pc}             //恢复现场，lr出栈到pc
