 //=====================================================================
//文件名称：uart.h
//功能概要：UART底层驱动构件头文件
//版权所有：苏州大学嵌入式系统与物联网研究所(sumcu.suda.edu.cn)
//更新记录：2019-05-20 V1.0  GXY
//适用芯片：STM32L433xx
 //=====================================================================

#ifndef _UART_H         //防止重复定义（ 开头)
#define _UART_H

#include "mcu.h"   //包含公共要素头文件
#include "string.h"

//宏定义串口号
#define UART_1    1
#define UART_2    2
#define UART_3    3
//配置UARTx使用的引脚组(TX,RX)0
//UART_1的引脚组配置：0:PTA9~10, 1:PTB6~7
#define UART1_GROUP    0
//UART_2的引脚组配置：0:PTA2~3
#define UART2_GROUP    0
//UART_3的引脚组配置：0:PTB10~11,1:PTC10~11
#define UART3_GROUP    1

//=======================函数注释区=======================================
//=====================================================================
//函数名称：uart_init
//功能概要：初始化uart模块
//参数说明：uartNo:串口号：UART_1、UART_2、UART_3
//          baud:波特率：300、600、1200、2400、4800、9600、19200、115200...
//函数返回：无
//=====================================================================
void uart_init(uint8_t uartNo, uint32_t baud_rate);

//=====================================================================
//函数名称：uart_send1
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//          ch:要发送的字节
//函数返回：函数执行状态：1=发送成功；0=发送失败。
//功能概要：串行发送1个字节
//=====================================================================
uint8_t uart_send1(uint8_t uartNo, uint8_t ch);

//=====================================================================
//函数名称：uart_sendN
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//         buff: 发送缓冲区
//         len:发送长度
//函数返回： 函数执行状态：1=发送成功；0=发送失败
//功能概要：串行 接收n个字节
//=====================================================================
uint8_t uart_sendN(uint8_t uartNo ,uint16_t len ,uint8_t* buff);

 //=====================================================================
//函数名称：uart_send_string
//参数说明：uartNo:UART模块号:UART_1、UART_2、UART_3
//                  buff:要发送的字符串的首地址
//函数返回： 函数执行状态：1=发送成功；0=发送失败
//功能概要：从指定UART端口发送一个以'\0'结束的字符串
 //=====================================================================
uint8_t uart_send_string(uint8_t uartNo, uint8_t *buff);

 //=====================================================================
//函数名称：uart_re1
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//        *fp:接收成功标志的指针:*fp=1:接收成功；*fp=0:接收失败
//函数返回：接收返回字节
//功能概要：串行接收1个字节
 //=====================================================================
uint8_t uart_re1(uint8_t uartNo,uint8_t *fp);

 //=====================================================================
//函数名称：uart_reN
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//          buff: 接收缓冲区
//          len:接收长度
//函数返回：函数执行状态 1=接收成功;0=接收失败
//功能概要：串行 接收n个字节,放入buff中
 //=====================================================================
uint8_t uart_reN(uint8_t uartNo ,uint16_t len ,uint8_t *buff);

 //=====================================================================
//函数名称：uart_enable_re_int
//参数说明：uartNo: 串口号:UART_1、UART_2、UART_3
//函数返回：无
//功能概要：开串口接收中断
 //=====================================================================
void uart_enable_re_int(uint8_t uartNo);

 //=====================================================================
//函数名称：uart_disable_re_int
//参数说明：uartNo: 串口号 :UART_1、UART_2、UART_3
//函数返回：无
//功能概要：关串口接收中断
 //=====================================================================
void uart_disable_re_int(uint8_t uartNo);

 //=====================================================================
//函数名称：uart_get_re_int
//参数说明：uartNo: 串口号 :UART_1、UART_2、UART_3
//函数返回：接收中断标志 1=有接收中断;0=无接收中断
//功能概要：获取串口接收中断标志,同时禁用发送中断
 //=====================================================================
uint8_t uart_get_re_int(uint8_t uartNo);

 //=====================================================================
//函数名称：uart_deinit
//参数说明：uartNo: 串口号 :UART_1、UART_2、UART_3
//函数返回：无
//功能概要：uart反初始化
 //=====================================================================
void uart_deinit(uint8_t uartNo);

//=======================函数注释区结束====================================

#endif     //防止重复定义（ 结尾）
