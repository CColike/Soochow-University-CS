///=====================================================================
//文件名称：emuart.h文件
//制作单位：SD-Arm(sumcu.suda.edu.cn)
//更新记录：20181201-20200627
//移植规则：【固定】
///=====================================================================
#ifndef EMUART_H    //防止重复定义（EMUART_H  开头)
#define EMUART_H

#include "string.h"
#include "uart.h"
#include "flash.h"
//=======================构件使用步骤开始================================
//（1）将本构件中的emuart_recv函数放入相应的串口中断中，并保存返回值到全局变量中。
//（2）在主函数中调用emuart_init函数完成初始化。
//（3）在有发送数据需要时，根据需要调用emuart_send1、emuart_sendN
//          或emuart_send_string函数发送数据。
//（4）在主程序中，通过判断emuart_recv的返回值是否为零判断是否接收到数据并处理。
//=======================构件使用步骤结束================================

//=====================================================================
//函数名称：emuart_init
//函数返回： 无
//参数说明： uartNo：emuart使用的串口； baud：emuart的波特率。
//功能概要：初始化emuart
//更新记录：20180602，wb；
//=====================================================================
void emuart_init(uint8_t uartNo,uint32_t baud);

//=====================================================================
//函数名称：emuart_send1
//函数返回： 无
//参数说明： a：待发送的一个字节数据
//功能概要：通过emuart发送一个字节数据
//更新记录：20180602，wb；
//=====================================================================
void emuart_send1(uint8_t a);

//=====================================================================
//函数名称：emuart_sendN
//函数返回： 无
//参数说明： len：待发送数组的长度；buff：待发送数据缓冲区
//功能概要：通过emuart发送一个字节数组
//更新记录：20180602，wb；
//=====================================================================
void emuart_sendN(uint16_t len ,uint8_t* buff);

//=====================================================================
//函数名称：emuart_send_string
//函数返回： 无
//参数说明： buff：待发送的字符串
//功能概要：通过emuart发送一个字符串
//更新记录：20180602，wb；
//=====================================================================
void emuart_send_string(uint8_t * buff);

//=====================================================================
//函数名称：emuart_frame
//功能概要：组帧，将待组帧的数据加入帧中。本函数应被放置于中断处理程序中。
//参数说明：ch：串口接收到一个字节数据；数组data：存放接收到的数据。
//函数返回：0：未组帧成功；非0：组帧成功，且返回值为接收到的数据长度
//备注：十六进制数据帧格式
//      帧头       + 数据长度         + 有效数据   +CRC校验码 +  帧尾
//      emuartFrameHead(2字节)
//      len(2字节)
//      有效数据(N字节 N=len[0]*256+len[1])
//      CRC校验(2字节)
//      emuartFrameTail(2字节)
//=====================================================================
uint16_t emuart_frame(uint8_t ch, uint8_t *data);
uint16_t useremuart_frame(uint8_t ch, uint8_t *data);
#endif
