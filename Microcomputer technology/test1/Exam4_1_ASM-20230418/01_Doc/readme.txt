==================================================================================
工程名称：Exam4_1-20201128
版权所有：SUDA-ARM(sumcu.suda.edu.cn)
版本更新：版本更新：20180810-20201128
本程序实现了：(1)每1S红蓝闪烁一次，并通过串口UARTC（板上标识为uart2）输出蓝灯亮暗状态以及闪烁次数
==================================================================================         
硬件说明：PTB7= 红灯；PTB8= 绿灯；PTB9= 蓝灯；

1. 工程概述
	(1)本工程为STM32微控制器无操作系统应用工程，汇编工程框架

2. 软件环境
	(1)AHL-GEC-IDE(V4.20)

3. 硬件环境
	(1)STM32L431RC板
	(2)UART2接线： microUSB串口线
    (3)UART0接线： USB转TTL串口线（如：PL2303HX）
	(4)printf使用内部串口uart3，板上接口标识为uart2
	(5)串口接收中断使用内部串口uart2，板上接口标识为uart0

4. 串口更新程序流程
   将烧录了BIOS程序的MCU上，用于串口更新的串口（本工程中为UART2）与PC机连接；给MCU上电，并打开上位机程序，便可以开
始串口更新。串口更新的程序步骤如下：
(1)握手并获取MCU芯片信息：上位机程序点击“软件更新”->“串口更新”，进入串口更新界面。选择“重新连接”时，上位机会遍历连
接在PC机上的设备，逐个发送握手帧，握手帧得到MCU的正确回应时表示握手成功；此后，上位机会再发送一个命令帧获取芯片信息。

5.NMI中断（STM32L432RC没有NMI，以ReSet脚模拟）
使用场景：烧入User程序后出现错误，可将复位脚在一分钟内拉低6次以上（包括6次）使程序回到BIOS运行
实现的功能：
(1)在60s内连续拉低NMI引脚6次以内（不含6次），实现拉低一次NMI引脚绿灯闪烁一次，而后蓝灯闪烁USER程序正常运行；
(2)在60s内连续拉低NMI引脚6次，实现绿灯闪烁，一直停留在BIOS程序运行,此后（指无时长限制）再点NMI引脚还是停留在BIOS运行；

5.BIOS和USER程序的衔接
(1)BIOS和USER程序的相互跳转
BIOS跳转到USER实现:将USER程序Flash的前两个字（即SP的初始值和复位向量）赋值给SP和PC指针；
USER跳转到BIOS实现：调用系统复位函数NVIC_SystemReset函数。
(2)共享中断服务例程
将中断向量表从BIOS的Flash拷贝到User的FLASH起始扇区，并将中断向量表的起始地址寄存武器SCB->VTOR修改为User的FLASH的中断向量表起始地址；
BIOS若使用某个中断服务例程不需要修改RAM的中断向量表的表项，而USER若使用某个中断服务例程需要对应的修改User的FLASH中断向量表的表项。
	
=============================================================================
部分汇编知识说明：
1.比较指令
	(1)CMP oprd1,oprd2  //cmp指令进行比较两个操作数的大小，表示第一个操作数减去第二个操作数，
	                     //但是不影响两个操作数的值，它影响flag的CF、ZF、OF和PF
	 	1)ZF：零标志
	 		a.若执行指令之后ZF=1,说明两个数相等，因为zero为1说明结果为0
	 	2）CF：进位标志
	 		a.当无符号时：若CF=1,则说明了有进位或借位，cmp是进行的减操作，故可以看出为借位，
	 			所以，此时oprd1<oprd2;
            b.当无符号时：若CF=0,则说明了无借位，但此时要注意ZF是否为0，若为0，则说明结果不为0，
            	故此时oprd1>oprd2
        3)SF:符号标志、OF：溢出标志 
         	a.当有符号时：若SF=0，OF=0 则说明了此时的值为正数，没有溢出，可以直观的看出，oprd1>oprd2;
   			b.当有符号时：若SF=1，OF=0 则说明了此时的值为负数，没有溢出，则为oprd1<oprd2;
   			c.当有符号时：若SF=0，OF=1 则说明了此时的值为正数，有溢出，可以看出oprd1<oprd2;
   			d.当有符号时：若SF=1，OF=1则说明了此时的值为负数，有溢出，可以看出oprd1>oprd2;	

2.逻辑运算类指令
	(1)AND {Rd,} Rn, Rm   //按位与
	(2)ORR {Rd,} Rn, Rm   //按位或
	(3)EOR {Rd,} Rn, Rm   //按位异或
	(4)BIC {Rd,} Rn, Rm   //位段清零
	
3.移位指令
	(1)ASR {Rd,}Rm,<Rs|#imm>   //算术右移
	(2)LSL {Rd,}Rm,<Rs|#imm>  //逻辑左移
	(3)LSR {Rd,}Rm,<Rs|#imm>  //逻辑右移
	(4)ROR {Rd,}Rm,<Rs|#imm>  //循环右移


	    	
=============================================================================
声明：
（1）本源代码，在所提供的硬件系统测试通过，真诚奉献给社会，不足之处，欢迎指正。
（2）若使用其他硬件系统，移植代码时，请仔细根据自己的硬件匹配。
----------------------------------------------------------------------------
SD-ARM   技术服务：http://sumcu.suda.edu.cn;	0512-65214835
=============================================================================




