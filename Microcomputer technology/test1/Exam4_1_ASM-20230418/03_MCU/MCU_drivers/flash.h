//===========================================================================
//文件名称：flash.h
//功能概要：flash底层驱动构件头文件
//版权所有：苏州大学嵌入式系统与物联网研究所(sumcu.suda.edu.cn)
//更新记录：2013-06-06 V1.0; 2016-06-06 V6.0; 2019-05-28
//适用芯片：KL25、KL26、KW01、STM32L433
//===========================================================================

#ifndef _FLASH_H
#define _FLASH_H

#include "mcu.h" 
#include "string.h"


#define USE_BIOS_FLASH    (0) //1代表函数继承自BIOS，0代表使用自带函数

#if(USE_BIOS_FLASH==0)

#define FLASH_KEY1       0x45670123U          //Flash控制寄存器(CR)解锁密钥1
#define FLASH_KEY2       0xCDEF89ABU          //Flash控制寄存器(CR)解锁密钥2

#define FLASH_PDKEY1     0x04152637U          //Flash运行模式下掉电解锁密钥1
#define FLASH_PDKEY2     0xFAFBFCFDU          //Flash运行模式下掉电解锁密钥2

#define FLASH_OPTKEY1    0x08192A3BU          //Flash选项寄存器(OPTR)解锁密钥1
#define FLASH_OPTKEY2    0x4C5D6E7FU          //Flash选项寄存器(OPTR)解锁密钥2

#define FLASH_PAGE_SIZE  ((uint32_t)0x800)     //Flash每个扇区大小(STM32L433为 2KB)

//======================================================================
//函数名称：flash_init
//函数返回：无
//参数说明：无
//功能概要：初始化flash模块
//======================================================================
void flash_init();

//======================================================================
//函数名称：flash_erase
//函数返回：函数执行执行状态：0=正常；1=异常。
//参数说明：sect：目标扇区号（范围取决于实际芯片，例如 STM32L433:0~127,每扇区2KB;
//功能概要：擦除flash存储器的sect扇区
//======================================================================
uint8_t flash_erase(uint16_t sect);

//======================================================================
//函数名称：flash_write
//函数返回：函数执行状态：0=正常；1=异常。
//参数说明：sect：扇区号（范围取决于实际芯片，例如 STM32L433:0~127,每扇区2KB）
//        offset:写入扇区内部偏移地址（0~2044，要求为0,4,8,12，......）
//        N：写入字节数目（4~2048,要求为4,8,12,......）
//        buf：源数据缓冲区首地址
//功能概要：将buf开始的N字节写入到flash存储器的sect扇区的 offset处
//=======================================================================
uint8_t flash_write(uint16_t sect,uint16_t offset,uint16_t N,uint8_t *buf);

//=======================================================================
//函数名称：flash_write_physical
//函数返回：函数执行状态：0=正常；非0=异常。
//参数说明： addr：目标地址，要求为4的倍数且大于Flash首地址
//              （例如：0x08000004，Flash首地址为0x08000000）
//       cnt：写入字节数目（8~512）
//       buf：源数据缓冲区首地址
//功能概要：flash写入操作
//=======================================================================
uint8_t flash_write_physical(uint32_t addr,uint16_t N,uint8_t buf[]);

//=======================================================================
//函数名称：flash_read_logic
//函数返回：无
//参数说明：dest：读出数据存放处（传地址，目的是带出所读数据，RAM区）
//       sect：扇区号（范围取决于实际芯片，例如 STM32L433:0~127,每扇区2KB）
//       offset:扇区内部偏移地址（0~2024，要求为0,4,8,12，......）
//       N：读字节数目（4~2048,要求为4,8,12,......）//
//功能概要：读取flash存储器的sect扇区的 offset处开始的N字节，到RAM区dest处
//=======================================================================
void flash_read_logic(uint8_t *dest,uint16_t sect,uint16_t offset,uint16_t N);


//=======================================================================
//函数名称：flash_read_physical
//函数返回：无
//参数说明：dest：读出数据存放处（传地址，目的是带出所读数据，RAM区）
//       addr：目标地址，要求为4的倍数（例如：0x00000004）
//       N：读字节数目（0~1020,要求为4，8,12,......）
//功能概要：读取flash指定地址的内容
//=======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N);


//======================================================================
//函数名称：flash_protect
//函数返回：无
//参数说明：M：KL25:待保护区域的扇区号入口值，实际保护M~M+3,其中M=0,4,8,......,124
//         KL36(64):待保护区域的扇区号入口值，实际保护M~M+1,其中M=0,2,4,6,......,62
//功能概要：flash保护操作
//说        明：KL25(128)每调用本函数一次，保护4个扇区（M~M+3）128/32=4
//       KL36(64)每调用本函数一次，保护2个扇区（M~M+1） 63/32=2
//======================================================================
void flash_protect(uint8_t M);
void flash_unprotect(uint8_t M);
//======================================================================
//函数名称：flash_isempty
//函数返回：1=目标区域为空；0=目标区域非空。
//参数说明：所要探测的flash区域初始地址
//功能概要：flash判空操作
//======================================================================
uint8_t flash_isempty(uint16_t sect,uint16_t N);

//========================================================================
//函数名称：flashCtl_isSectorProtected
//函数返回：1=扇区被保护；0=扇区未被保护
//参数说明：所要检测的扇区
//功能概要：判断flash扇区是否被保护
//=========================================================================
uint8_t flash_isSectorProtected(uint16_t sect);
//=======================函数注释区结束==================================


//=======================函数定义区结束=====================================

#elif (USE_BIOS_FLASH == 1)
#define flash_init ((void (*)())(component_fun[23]))
#define flash_erase ((uint8_t (*)(uint16_t sect))(component_fun[24]))
#define flash_write ((uint8_t (*)(uint16_t sect,uint16_t offset,uint16_t N,uint8_t *buf))(component_fun[25]))
#define flash_write_physical ((uint8_t (*)(uint32_t destaddr,uint16_t N,uint8_t *buf))(component_fun[26]))
#define flash_read_logic ((void (*)(uint8_t *dest,uint16_t sect,uint16_t offset,uint16_t N))(component_fun[27]))
#define flash_read_physical ((void (*)(uint8_t *dest,uint32_t addr,uint16_t N))(component_fun[28]))
#define flash_protect ((void (*)(uint8_t sect))(component_fun[29]))
#define flash_isempty ((uint8_t (*)(uint16_t sect,uint16_t offset,uint16_t N))(component_fun[30]))
#endif

#endif //_FLASH_H

//======================================================================
//声明：
//（1）我们开发的源代码，在本中心提供的硬件系统测试通过，真诚奉献给社会，
//    不足之处，欢迎指正。
//（2）对于使用非本中心硬件系统的用户，移植代码时，请仔细根据自己的硬件匹配。
//
//苏州大学嵌入式系统与物联网研究所,0512-65214835  http://sumcu.suda.edu.cn

