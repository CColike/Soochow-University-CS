Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     statement -> if_elif_else
Rule 8     statement -> while
Rule 9     statement -> for
Rule 10    statement -> BREAK
Rule 11    assignment -> VARIABLE = NUMBER
Rule 12    assignment -> VARIABLE [ expr ] = NUMBER
Rule 13    assignment -> VARIABLE = VARIABLE
Rule 14    assignment -> VARIABLE = VARIABLE [ expr ]
Rule 15    assignment -> VARIABLE = num_list
Rule 16    num_list -> [ numbers ]
Rule 17    numbers -> NUMBER
Rule 18    numbers -> numbers , NUMBER
Rule 19    operation -> VARIABLE = expr
Rule 20    operation -> VARIABLE [ expr ] = expr
Rule 21    expr -> expr + term
Rule 22    expr -> expr - term
Rule 23    expr -> expr DIV expr
Rule 24    expr -> term
Rule 25    expr -> LEN ( factor )
Rule 26    term -> term * factor
Rule 27    term -> term / factor
Rule 28    term -> factor
Rule 29    factor -> NUMBER
Rule 30    factor -> VARIABLE
Rule 31    factor -> VARIABLE [ expr ]
Rule 32    factor -> ( expr )
Rule 33    print -> PRINT ( VARIABLE )
Rule 34    condition -> factor > factor
Rule 35    condition -> factor < factor
Rule 36    condition -> factor LE factor
Rule 37    condition -> factor GE factor
Rule 38    if_elif_else -> if
Rule 39    if_elif_else -> if elif else
Rule 40    if -> IF ( condition ) { statements }
Rule 41    elif -> ELIF ( condition ) { statements }
Rule 42    else -> ELSE { statements }
Rule 43    while -> WHILE ( condition ) { statements }
Rule 44    for -> FOR ( conditions ) { statements }
Rule 45    conditions -> assignment ; condition ; increment
Rule 46    increment -> VARIABLE INC

Terminals, with rules where they appear

(                    : 25 32 33 40 41 43 44
)                    : 25 32 33 40 41 43 44
*                    : 26
+                    : 21
,                    : 18
-                    : 22
/                    : 27
;                    : 45 45
<                    : 35
=                    : 11 12 13 14 15 19 20
>                    : 34
BREAK                : 10
DIV                  : 23
ELIF                 : 41
ELSE                 : 42
FOR                  : 44
GE                   : 37
IF                   : 40
INC                  : 46
LE                   : 36
LEN                  : 25
NUMBER               : 11 12 17 18 29
PRINT                : 33
VARIABLE             : 11 12 13 13 14 14 15 19 20 30 31 33 46
WHILE                : 43
[                    : 12 14 16 20 31
]                    : 12 14 16 20 31
error                : 
{                    : 40 41 42 43 44
}                    : 40 41 42 43 44

Nonterminals, with rules where they appear

assignment           : 4 45
condition            : 40 41 43 45
conditions           : 44
elif                 : 39
else                 : 39
expr                 : 12 14 19 20 20 21 22 23 23 31 32
factor               : 25 26 27 28 34 34 35 35 36 36 37 37
for                  : 9
if                   : 38 39
if_elif_else         : 7
increment            : 45
num_list             : 15
numbers              : 16 18
operation            : 5
print                : 6
program              : 0
statement            : 2 3
statements           : 1 2 40 41 42 43 44
term                 : 21 22 24 26 27
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    statements                     shift and go to state 1
    if_elif_else                   shift and go to state 16
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    program                        shift and go to state 7
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 1

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    $end            reduce using rule 1 (program -> statements .)
    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    statement                      shift and go to state 17
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    if_elif_else                   shift and go to state 16
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 2

    (43) while -> WHILE . ( condition ) { statements }

    (               shift and go to state 18


state 3

    (33) print -> PRINT . ( VARIABLE )

    (               shift and go to state 19


state 4

    (5) statement -> operation .

    }               reduce using rule 5 (statement -> operation .)
    BREAK           reduce using rule 5 (statement -> operation .)
    VARIABLE        reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    WHILE           reduce using rule 5 (statement -> operation .)
    FOR             reduce using rule 5 (statement -> operation .)
    IF              reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)


state 5

    (38) if_elif_else -> if .
    (39) if_elif_else -> if . elif else
    (41) elif -> . ELIF ( condition ) { statements }

    BREAK           reduce using rule 38 (if_elif_else -> if .)
    VARIABLE        reduce using rule 38 (if_elif_else -> if .)
    PRINT           reduce using rule 38 (if_elif_else -> if .)
    WHILE           reduce using rule 38 (if_elif_else -> if .)
    FOR             reduce using rule 38 (if_elif_else -> if .)
    IF              reduce using rule 38 (if_elif_else -> if .)
    $end            reduce using rule 38 (if_elif_else -> if .)
    }               reduce using rule 38 (if_elif_else -> if .)
    ELIF            shift and go to state 21

    elif                           shift and go to state 20

state 6

    (9) statement -> for .

    }               reduce using rule 9 (statement -> for .)
    BREAK           reduce using rule 9 (statement -> for .)
    VARIABLE        reduce using rule 9 (statement -> for .)
    PRINT           reduce using rule 9 (statement -> for .)
    WHILE           reduce using rule 9 (statement -> for .)
    FOR             reduce using rule 9 (statement -> for .)
    IF              reduce using rule 9 (statement -> for .)
    $end            reduce using rule 9 (statement -> for .)


state 7

    (0) S' -> program .



state 8

    (3) statements -> statement .

    }               reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 9

    (6) statement -> print .

    }               reduce using rule 6 (statement -> print .)
    BREAK           reduce using rule 6 (statement -> print .)
    VARIABLE        reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    WHILE           reduce using rule 6 (statement -> print .)
    FOR             reduce using rule 6 (statement -> print .)
    IF              reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)


state 10

    (44) for -> FOR . ( conditions ) { statements }

    (               shift and go to state 22


state 11

    (4) statement -> assignment .

    }               reduce using rule 4 (statement -> assignment .)
    BREAK           reduce using rule 4 (statement -> assignment .)
    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)


state 12

    (11) assignment -> VARIABLE . = NUMBER
    (12) assignment -> VARIABLE . [ expr ] = NUMBER
    (13) assignment -> VARIABLE . = VARIABLE
    (14) assignment -> VARIABLE . = VARIABLE [ expr ]
    (15) assignment -> VARIABLE . = num_list
    (19) operation -> VARIABLE . = expr
    (20) operation -> VARIABLE . [ expr ] = expr

    =               shift and go to state 24
    [               shift and go to state 23


state 13

    (40) if -> IF . ( condition ) { statements }

    (               shift and go to state 25


state 14

    (10) statement -> BREAK .

    }               reduce using rule 10 (statement -> BREAK .)
    BREAK           reduce using rule 10 (statement -> BREAK .)
    VARIABLE        reduce using rule 10 (statement -> BREAK .)
    PRINT           reduce using rule 10 (statement -> BREAK .)
    WHILE           reduce using rule 10 (statement -> BREAK .)
    FOR             reduce using rule 10 (statement -> BREAK .)
    IF              reduce using rule 10 (statement -> BREAK .)
    $end            reduce using rule 10 (statement -> BREAK .)


state 15

    (8) statement -> while .

    }               reduce using rule 8 (statement -> while .)
    BREAK           reduce using rule 8 (statement -> while .)
    VARIABLE        reduce using rule 8 (statement -> while .)
    PRINT           reduce using rule 8 (statement -> while .)
    WHILE           reduce using rule 8 (statement -> while .)
    FOR             reduce using rule 8 (statement -> while .)
    IF              reduce using rule 8 (statement -> while .)
    $end            reduce using rule 8 (statement -> while .)


state 16

    (7) statement -> if_elif_else .

    }               reduce using rule 7 (statement -> if_elif_else .)
    BREAK           reduce using rule 7 (statement -> if_elif_else .)
    VARIABLE        reduce using rule 7 (statement -> if_elif_else .)
    PRINT           reduce using rule 7 (statement -> if_elif_else .)
    WHILE           reduce using rule 7 (statement -> if_elif_else .)
    FOR             reduce using rule 7 (statement -> if_elif_else .)
    IF              reduce using rule 7 (statement -> if_elif_else .)
    $end            reduce using rule 7 (statement -> if_elif_else .)


state 17

    (2) statements -> statements statement .

    }               reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 18

    (43) while -> WHILE ( . condition ) { statements }
    (34) condition -> . factor > factor
    (35) condition -> . factor < factor
    (36) condition -> . factor LE factor
    (37) condition -> . factor GE factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    condition                      shift and go to state 30
    factor                         shift and go to state 28

state 19

    (33) print -> PRINT ( . VARIABLE )

    VARIABLE        shift and go to state 31


state 20

    (39) if_elif_else -> if elif . else
    (42) else -> . ELSE { statements }

    ELSE            shift and go to state 33

    else                           shift and go to state 32

state 21

    (41) elif -> ELIF . ( condition ) { statements }

    (               shift and go to state 34


state 22

    (44) for -> FOR ( . conditions ) { statements }
    (45) conditions -> . assignment ; condition ; increment
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list

    VARIABLE        shift and go to state 36

    assignment                     shift and go to state 35
    conditions                     shift and go to state 37

state 23

    (12) assignment -> VARIABLE [ . expr ] = NUMBER
    (20) operation -> VARIABLE [ . expr ] = expr
    (21) expr -> . expr + term
    (22) expr -> . expr - term
    (23) expr -> . expr DIV expr
    (24) expr -> . term
    (25) expr -> . LEN ( factor )
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    LEN             shift and go to state 40
    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    expr                           shift and go to state 39
    term                           shift and go to state 38
    factor                         shift and go to state 41

state 24

    (11) assignment -> VARIABLE = . NUMBER
    (13) assignment -> VARIABLE = . VARIABLE
    (14) assignment -> VARIABLE = . VARIABLE [ expr ]
    (15) assignment -> VARIABLE = . num_list
    (19) operation -> VARIABLE = . expr
    (16) num_list -> . [ numbers ]
    (21) expr -> . expr + term
    (22) expr -> . expr - term
    (23) expr -> . expr DIV expr
    (24) expr -> . term
    (25) expr -> . LEN ( factor )
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 43
    VARIABLE        shift and go to state 44
    [               shift and go to state 45
    LEN             shift and go to state 40
    (               shift and go to state 26

    expr                           shift and go to state 42
    term                           shift and go to state 38
    num_list                       shift and go to state 46
    factor                         shift and go to state 41

state 25

    (40) if -> IF ( . condition ) { statements }
    (34) condition -> . factor > factor
    (35) condition -> . factor < factor
    (36) condition -> . factor LE factor
    (37) condition -> . factor GE factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    condition                      shift and go to state 47
    factor                         shift and go to state 28

state 26

    (32) factor -> ( . expr )
    (21) expr -> . expr + term
    (22) expr -> . expr - term
    (23) expr -> . expr DIV expr
    (24) expr -> . term
    (25) expr -> . LEN ( factor )
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    LEN             shift and go to state 40
    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    expr                           shift and go to state 48
    term                           shift and go to state 38
    factor                         shift and go to state 41

state 27

    (29) factor -> NUMBER .

    >               reduce using rule 29 (factor -> NUMBER .)
    <               reduce using rule 29 (factor -> NUMBER .)
    LE              reduce using rule 29 (factor -> NUMBER .)
    GE              reduce using rule 29 (factor -> NUMBER .)
    )               reduce using rule 29 (factor -> NUMBER .)
    *               reduce using rule 29 (factor -> NUMBER .)
    /               reduce using rule 29 (factor -> NUMBER .)
    ]               reduce using rule 29 (factor -> NUMBER .)
    +               reduce using rule 29 (factor -> NUMBER .)
    -               reduce using rule 29 (factor -> NUMBER .)
    DIV             reduce using rule 29 (factor -> NUMBER .)
    BREAK           reduce using rule 29 (factor -> NUMBER .)
    VARIABLE        reduce using rule 29 (factor -> NUMBER .)
    PRINT           reduce using rule 29 (factor -> NUMBER .)
    WHILE           reduce using rule 29 (factor -> NUMBER .)
    FOR             reduce using rule 29 (factor -> NUMBER .)
    IF              reduce using rule 29 (factor -> NUMBER .)
    $end            reduce using rule 29 (factor -> NUMBER .)
    }               reduce using rule 29 (factor -> NUMBER .)
    ;               reduce using rule 29 (factor -> NUMBER .)


state 28

    (34) condition -> factor . > factor
    (35) condition -> factor . < factor
    (36) condition -> factor . LE factor
    (37) condition -> factor . GE factor

    >               shift and go to state 50
    <               shift and go to state 52
    LE              shift and go to state 49
    GE              shift and go to state 51


state 29

    (30) factor -> VARIABLE .
    (31) factor -> VARIABLE . [ expr ]

    >               reduce using rule 30 (factor -> VARIABLE .)
    <               reduce using rule 30 (factor -> VARIABLE .)
    LE              reduce using rule 30 (factor -> VARIABLE .)
    GE              reduce using rule 30 (factor -> VARIABLE .)
    )               reduce using rule 30 (factor -> VARIABLE .)
    *               reduce using rule 30 (factor -> VARIABLE .)
    /               reduce using rule 30 (factor -> VARIABLE .)
    ]               reduce using rule 30 (factor -> VARIABLE .)
    +               reduce using rule 30 (factor -> VARIABLE .)
    -               reduce using rule 30 (factor -> VARIABLE .)
    DIV             reduce using rule 30 (factor -> VARIABLE .)
    BREAK           reduce using rule 30 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 30 (factor -> VARIABLE .)
    PRINT           reduce using rule 30 (factor -> VARIABLE .)
    WHILE           reduce using rule 30 (factor -> VARIABLE .)
    FOR             reduce using rule 30 (factor -> VARIABLE .)
    IF              reduce using rule 30 (factor -> VARIABLE .)
    $end            reduce using rule 30 (factor -> VARIABLE .)
    }               reduce using rule 30 (factor -> VARIABLE .)
    ;               reduce using rule 30 (factor -> VARIABLE .)
    [               shift and go to state 53


state 30

    (43) while -> WHILE ( condition . ) { statements }

    )               shift and go to state 54


state 31

    (33) print -> PRINT ( VARIABLE . )

    )               shift and go to state 55


state 32

    (39) if_elif_else -> if elif else .

    BREAK           reduce using rule 39 (if_elif_else -> if elif else .)
    VARIABLE        reduce using rule 39 (if_elif_else -> if elif else .)
    PRINT           reduce using rule 39 (if_elif_else -> if elif else .)
    WHILE           reduce using rule 39 (if_elif_else -> if elif else .)
    FOR             reduce using rule 39 (if_elif_else -> if elif else .)
    IF              reduce using rule 39 (if_elif_else -> if elif else .)
    $end            reduce using rule 39 (if_elif_else -> if elif else .)
    }               reduce using rule 39 (if_elif_else -> if elif else .)


state 33

    (42) else -> ELSE . { statements }

    {               shift and go to state 56


state 34

    (41) elif -> ELIF ( . condition ) { statements }
    (34) condition -> . factor > factor
    (35) condition -> . factor < factor
    (36) condition -> . factor LE factor
    (37) condition -> . factor GE factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    condition                      shift and go to state 57
    factor                         shift and go to state 28

state 35

    (45) conditions -> assignment . ; condition ; increment

    ;               shift and go to state 58


state 36

    (11) assignment -> VARIABLE . = NUMBER
    (12) assignment -> VARIABLE . [ expr ] = NUMBER
    (13) assignment -> VARIABLE . = VARIABLE
    (14) assignment -> VARIABLE . = VARIABLE [ expr ]
    (15) assignment -> VARIABLE . = num_list

    =               shift and go to state 60
    [               shift and go to state 59


state 37

    (44) for -> FOR ( conditions . ) { statements }

    )               shift and go to state 61


state 38

    (24) expr -> term .
    (26) term -> term . * factor
    (27) term -> term . / factor

    +               reduce using rule 24 (expr -> term .)
    -               reduce using rule 24 (expr -> term .)
    DIV             reduce using rule 24 (expr -> term .)
    BREAK           reduce using rule 24 (expr -> term .)
    VARIABLE        reduce using rule 24 (expr -> term .)
    PRINT           reduce using rule 24 (expr -> term .)
    WHILE           reduce using rule 24 (expr -> term .)
    FOR             reduce using rule 24 (expr -> term .)
    IF              reduce using rule 24 (expr -> term .)
    $end            reduce using rule 24 (expr -> term .)
    }               reduce using rule 24 (expr -> term .)
    ]               reduce using rule 24 (expr -> term .)
    )               reduce using rule 24 (expr -> term .)
    *               shift and go to state 62
    /               shift and go to state 63


state 39

    (12) assignment -> VARIABLE [ expr . ] = NUMBER
    (20) operation -> VARIABLE [ expr . ] = expr
    (21) expr -> expr . + term
    (22) expr -> expr . - term
    (23) expr -> expr . DIV expr

    ]               shift and go to state 66
    +               shift and go to state 64
    -               shift and go to state 65
    DIV             shift and go to state 67


state 40

    (25) expr -> LEN . ( factor )

    (               shift and go to state 68


state 41

    (28) term -> factor .

    *               reduce using rule 28 (term -> factor .)
    /               reduce using rule 28 (term -> factor .)
    ]               reduce using rule 28 (term -> factor .)
    +               reduce using rule 28 (term -> factor .)
    -               reduce using rule 28 (term -> factor .)
    DIV             reduce using rule 28 (term -> factor .)
    BREAK           reduce using rule 28 (term -> factor .)
    VARIABLE        reduce using rule 28 (term -> factor .)
    PRINT           reduce using rule 28 (term -> factor .)
    WHILE           reduce using rule 28 (term -> factor .)
    FOR             reduce using rule 28 (term -> factor .)
    IF              reduce using rule 28 (term -> factor .)
    $end            reduce using rule 28 (term -> factor .)
    }               reduce using rule 28 (term -> factor .)
    )               reduce using rule 28 (term -> factor .)


state 42

    (19) operation -> VARIABLE = expr .
    (21) expr -> expr . + term
    (22) expr -> expr . - term
    (23) expr -> expr . DIV expr

    BREAK           reduce using rule 19 (operation -> VARIABLE = expr .)
    VARIABLE        reduce using rule 19 (operation -> VARIABLE = expr .)
    PRINT           reduce using rule 19 (operation -> VARIABLE = expr .)
    WHILE           reduce using rule 19 (operation -> VARIABLE = expr .)
    FOR             reduce using rule 19 (operation -> VARIABLE = expr .)
    IF              reduce using rule 19 (operation -> VARIABLE = expr .)
    $end            reduce using rule 19 (operation -> VARIABLE = expr .)
    }               reduce using rule 19 (operation -> VARIABLE = expr .)
    +               shift and go to state 64
    -               shift and go to state 65
    DIV             shift and go to state 67


state 43

    (11) assignment -> VARIABLE = NUMBER .
    (29) factor -> NUMBER .

  ! reduce/reduce conflict for BREAK resolved using rule 11 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 11 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for PRINT resolved using rule 11 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 11 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 11 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for } resolved using rule 11 (assignment -> VARIABLE = NUMBER .)
    }               reduce using rule 11 (assignment -> VARIABLE = NUMBER .)
    BREAK           reduce using rule 11 (assignment -> VARIABLE = NUMBER .)
    VARIABLE        reduce using rule 11 (assignment -> VARIABLE = NUMBER .)
    PRINT           reduce using rule 11 (assignment -> VARIABLE = NUMBER .)
    WHILE           reduce using rule 11 (assignment -> VARIABLE = NUMBER .)
    FOR             reduce using rule 11 (assignment -> VARIABLE = NUMBER .)
    IF              reduce using rule 11 (assignment -> VARIABLE = NUMBER .)
    $end            reduce using rule 11 (assignment -> VARIABLE = NUMBER .)
    *               reduce using rule 29 (factor -> NUMBER .)
    /               reduce using rule 29 (factor -> NUMBER .)
    +               reduce using rule 29 (factor -> NUMBER .)
    -               reduce using rule 29 (factor -> NUMBER .)
    DIV             reduce using rule 29 (factor -> NUMBER .)

  ! BREAK           [ reduce using rule 29 (factor -> NUMBER .) ]
  ! VARIABLE        [ reduce using rule 29 (factor -> NUMBER .) ]
  ! PRINT           [ reduce using rule 29 (factor -> NUMBER .) ]
  ! WHILE           [ reduce using rule 29 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 29 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 29 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 29 (factor -> NUMBER .) ]
  ! }               [ reduce using rule 29 (factor -> NUMBER .) ]


state 44

    (13) assignment -> VARIABLE = VARIABLE .
    (14) assignment -> VARIABLE = VARIABLE . [ expr ]
    (30) factor -> VARIABLE .
    (31) factor -> VARIABLE . [ expr ]

  ! reduce/reduce conflict for BREAK resolved using rule 13 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 13 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for PRINT resolved using rule 13 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 13 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 13 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for } resolved using rule 13 (assignment -> VARIABLE = VARIABLE .)
    }               reduce using rule 13 (assignment -> VARIABLE = VARIABLE .)
    BREAK           reduce using rule 13 (assignment -> VARIABLE = VARIABLE .)
    VARIABLE        reduce using rule 13 (assignment -> VARIABLE = VARIABLE .)
    PRINT           reduce using rule 13 (assignment -> VARIABLE = VARIABLE .)
    WHILE           reduce using rule 13 (assignment -> VARIABLE = VARIABLE .)
    FOR             reduce using rule 13 (assignment -> VARIABLE = VARIABLE .)
    IF              reduce using rule 13 (assignment -> VARIABLE = VARIABLE .)
    $end            reduce using rule 13 (assignment -> VARIABLE = VARIABLE .)
    [               shift and go to state 69
    *               reduce using rule 30 (factor -> VARIABLE .)
    /               reduce using rule 30 (factor -> VARIABLE .)
    +               reduce using rule 30 (factor -> VARIABLE .)
    -               reduce using rule 30 (factor -> VARIABLE .)
    DIV             reduce using rule 30 (factor -> VARIABLE .)

  ! BREAK           [ reduce using rule 30 (factor -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 30 (factor -> VARIABLE .) ]
  ! PRINT           [ reduce using rule 30 (factor -> VARIABLE .) ]
  ! WHILE           [ reduce using rule 30 (factor -> VARIABLE .) ]
  ! FOR             [ reduce using rule 30 (factor -> VARIABLE .) ]
  ! IF              [ reduce using rule 30 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 30 (factor -> VARIABLE .) ]
  ! }               [ reduce using rule 30 (factor -> VARIABLE .) ]


state 45

    (16) num_list -> [ . numbers ]
    (17) numbers -> . NUMBER
    (18) numbers -> . numbers , NUMBER

    NUMBER          shift and go to state 71

    numbers                        shift and go to state 70

state 46

    (15) assignment -> VARIABLE = num_list .

    }               reduce using rule 15 (assignment -> VARIABLE = num_list .)
    BREAK           reduce using rule 15 (assignment -> VARIABLE = num_list .)
    VARIABLE        reduce using rule 15 (assignment -> VARIABLE = num_list .)
    PRINT           reduce using rule 15 (assignment -> VARIABLE = num_list .)
    WHILE           reduce using rule 15 (assignment -> VARIABLE = num_list .)
    FOR             reduce using rule 15 (assignment -> VARIABLE = num_list .)
    IF              reduce using rule 15 (assignment -> VARIABLE = num_list .)
    $end            reduce using rule 15 (assignment -> VARIABLE = num_list .)
    ;               reduce using rule 15 (assignment -> VARIABLE = num_list .)


state 47

    (40) if -> IF ( condition . ) { statements }

    )               shift and go to state 72


state 48

    (32) factor -> ( expr . )
    (21) expr -> expr . + term
    (22) expr -> expr . - term
    (23) expr -> expr . DIV expr

    )               shift and go to state 73
    +               shift and go to state 64
    -               shift and go to state 65
    DIV             shift and go to state 67


state 49

    (36) condition -> factor LE . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    factor                         shift and go to state 74

state 50

    (34) condition -> factor > . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    factor                         shift and go to state 75

state 51

    (37) condition -> factor GE . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    factor                         shift and go to state 76

state 52

    (35) condition -> factor < . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    factor                         shift and go to state 77

state 53

    (31) factor -> VARIABLE [ . expr ]
    (21) expr -> . expr + term
    (22) expr -> . expr - term
    (23) expr -> . expr DIV expr
    (24) expr -> . term
    (25) expr -> . LEN ( factor )
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    LEN             shift and go to state 40
    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    expr                           shift and go to state 78
    term                           shift and go to state 38
    factor                         shift and go to state 41

state 54

    (43) while -> WHILE ( condition ) . { statements }

    {               shift and go to state 79


state 55

    (33) print -> PRINT ( VARIABLE ) .

    }               reduce using rule 33 (print -> PRINT ( VARIABLE ) .)
    BREAK           reduce using rule 33 (print -> PRINT ( VARIABLE ) .)
    VARIABLE        reduce using rule 33 (print -> PRINT ( VARIABLE ) .)
    PRINT           reduce using rule 33 (print -> PRINT ( VARIABLE ) .)
    WHILE           reduce using rule 33 (print -> PRINT ( VARIABLE ) .)
    FOR             reduce using rule 33 (print -> PRINT ( VARIABLE ) .)
    IF              reduce using rule 33 (print -> PRINT ( VARIABLE ) .)
    $end            reduce using rule 33 (print -> PRINT ( VARIABLE ) .)


state 56

    (42) else -> ELSE { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    statements                     shift and go to state 80
    statement                      shift and go to state 8
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    if_elif_else                   shift and go to state 16
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 57

    (41) elif -> ELIF ( condition . ) { statements }

    )               shift and go to state 81


state 58

    (45) conditions -> assignment ; . condition ; increment
    (34) condition -> . factor > factor
    (35) condition -> . factor < factor
    (36) condition -> . factor LE factor
    (37) condition -> . factor GE factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    condition                      shift and go to state 82
    factor                         shift and go to state 28

state 59

    (12) assignment -> VARIABLE [ . expr ] = NUMBER
    (21) expr -> . expr + term
    (22) expr -> . expr - term
    (23) expr -> . expr DIV expr
    (24) expr -> . term
    (25) expr -> . LEN ( factor )
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    LEN             shift and go to state 40
    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    expr                           shift and go to state 83
    term                           shift and go to state 38
    factor                         shift and go to state 41

state 60

    (11) assignment -> VARIABLE = . NUMBER
    (13) assignment -> VARIABLE = . VARIABLE
    (14) assignment -> VARIABLE = . VARIABLE [ expr ]
    (15) assignment -> VARIABLE = . num_list
    (16) num_list -> . [ numbers ]

    NUMBER          shift and go to state 84
    VARIABLE        shift and go to state 85
    [               shift and go to state 45

    num_list                       shift and go to state 46

state 61

    (44) for -> FOR ( conditions ) . { statements }

    {               shift and go to state 86


state 62

    (26) term -> term * . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    factor                         shift and go to state 87

state 63

    (27) term -> term / . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    factor                         shift and go to state 88

state 64

    (21) expr -> expr + . term
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    term                           shift and go to state 89
    factor                         shift and go to state 41

state 65

    (22) expr -> expr - . term
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    term                           shift and go to state 90
    factor                         shift and go to state 41

state 66

    (12) assignment -> VARIABLE [ expr ] . = NUMBER
    (20) operation -> VARIABLE [ expr ] . = expr

    =               shift and go to state 91


state 67

    (23) expr -> expr DIV . expr
    (21) expr -> . expr + term
    (22) expr -> . expr - term
    (23) expr -> . expr DIV expr
    (24) expr -> . term
    (25) expr -> . LEN ( factor )
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    LEN             shift and go to state 40
    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    expr                           shift and go to state 92
    term                           shift and go to state 38
    factor                         shift and go to state 41

state 68

    (25) expr -> LEN ( . factor )
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    factor                         shift and go to state 93

state 69

    (14) assignment -> VARIABLE = VARIABLE [ . expr ]
    (31) factor -> VARIABLE [ . expr ]
    (21) expr -> . expr + term
    (22) expr -> . expr - term
    (23) expr -> . expr DIV expr
    (24) expr -> . term
    (25) expr -> . LEN ( factor )
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    LEN             shift and go to state 40
    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    expr                           shift and go to state 94
    term                           shift and go to state 38
    factor                         shift and go to state 41

state 70

    (16) num_list -> [ numbers . ]
    (18) numbers -> numbers . , NUMBER

    ]               shift and go to state 95
    ,               shift and go to state 96


state 71

    (17) numbers -> NUMBER .

    ]               reduce using rule 17 (numbers -> NUMBER .)
    ,               reduce using rule 17 (numbers -> NUMBER .)


state 72

    (40) if -> IF ( condition ) . { statements }

    {               shift and go to state 97


state 73

    (32) factor -> ( expr ) .

    >               reduce using rule 32 (factor -> ( expr ) .)
    <               reduce using rule 32 (factor -> ( expr ) .)
    LE              reduce using rule 32 (factor -> ( expr ) .)
    GE              reduce using rule 32 (factor -> ( expr ) .)
    )               reduce using rule 32 (factor -> ( expr ) .)
    *               reduce using rule 32 (factor -> ( expr ) .)
    /               reduce using rule 32 (factor -> ( expr ) .)
    ]               reduce using rule 32 (factor -> ( expr ) .)
    +               reduce using rule 32 (factor -> ( expr ) .)
    -               reduce using rule 32 (factor -> ( expr ) .)
    DIV             reduce using rule 32 (factor -> ( expr ) .)
    BREAK           reduce using rule 32 (factor -> ( expr ) .)
    VARIABLE        reduce using rule 32 (factor -> ( expr ) .)
    PRINT           reduce using rule 32 (factor -> ( expr ) .)
    WHILE           reduce using rule 32 (factor -> ( expr ) .)
    FOR             reduce using rule 32 (factor -> ( expr ) .)
    IF              reduce using rule 32 (factor -> ( expr ) .)
    $end            reduce using rule 32 (factor -> ( expr ) .)
    }               reduce using rule 32 (factor -> ( expr ) .)
    ;               reduce using rule 32 (factor -> ( expr ) .)


state 74

    (36) condition -> factor LE factor .

    ;               reduce using rule 36 (condition -> factor LE factor .)
    )               reduce using rule 36 (condition -> factor LE factor .)


state 75

    (34) condition -> factor > factor .

    ;               reduce using rule 34 (condition -> factor > factor .)
    )               reduce using rule 34 (condition -> factor > factor .)


state 76

    (37) condition -> factor GE factor .

    ;               reduce using rule 37 (condition -> factor GE factor .)
    )               reduce using rule 37 (condition -> factor GE factor .)


state 77

    (35) condition -> factor < factor .

    ;               reduce using rule 35 (condition -> factor < factor .)
    )               reduce using rule 35 (condition -> factor < factor .)


state 78

    (31) factor -> VARIABLE [ expr . ]
    (21) expr -> expr . + term
    (22) expr -> expr . - term
    (23) expr -> expr . DIV expr

    ]               shift and go to state 98
    +               shift and go to state 64
    -               shift and go to state 65
    DIV             shift and go to state 67


state 79

    (43) while -> WHILE ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    statements                     shift and go to state 99
    if_elif_else                   shift and go to state 16
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 80

    (42) else -> ELSE { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    }               shift and go to state 100
    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    statement                      shift and go to state 17
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    if_elif_else                   shift and go to state 16
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 81

    (41) elif -> ELIF ( condition ) . { statements }

    {               shift and go to state 101


state 82

    (45) conditions -> assignment ; condition . ; increment

    ;               shift and go to state 102


state 83

    (12) assignment -> VARIABLE [ expr . ] = NUMBER
    (21) expr -> expr . + term
    (22) expr -> expr . - term
    (23) expr -> expr . DIV expr

    ]               shift and go to state 103
    +               shift and go to state 64
    -               shift and go to state 65
    DIV             shift and go to state 67


state 84

    (11) assignment -> VARIABLE = NUMBER .

    ;               reduce using rule 11 (assignment -> VARIABLE = NUMBER .)


state 85

    (13) assignment -> VARIABLE = VARIABLE .
    (14) assignment -> VARIABLE = VARIABLE . [ expr ]

    ;               reduce using rule 13 (assignment -> VARIABLE = VARIABLE .)
    [               shift and go to state 104


state 86

    (44) for -> FOR ( conditions ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    statements                     shift and go to state 105
    if_elif_else                   shift and go to state 16
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 87

    (26) term -> term * factor .

    *               reduce using rule 26 (term -> term * factor .)
    /               reduce using rule 26 (term -> term * factor .)
    ]               reduce using rule 26 (term -> term * factor .)
    +               reduce using rule 26 (term -> term * factor .)
    -               reduce using rule 26 (term -> term * factor .)
    DIV             reduce using rule 26 (term -> term * factor .)
    BREAK           reduce using rule 26 (term -> term * factor .)
    VARIABLE        reduce using rule 26 (term -> term * factor .)
    PRINT           reduce using rule 26 (term -> term * factor .)
    WHILE           reduce using rule 26 (term -> term * factor .)
    FOR             reduce using rule 26 (term -> term * factor .)
    IF              reduce using rule 26 (term -> term * factor .)
    $end            reduce using rule 26 (term -> term * factor .)
    }               reduce using rule 26 (term -> term * factor .)
    )               reduce using rule 26 (term -> term * factor .)


state 88

    (27) term -> term / factor .

    *               reduce using rule 27 (term -> term / factor .)
    /               reduce using rule 27 (term -> term / factor .)
    ]               reduce using rule 27 (term -> term / factor .)
    +               reduce using rule 27 (term -> term / factor .)
    -               reduce using rule 27 (term -> term / factor .)
    DIV             reduce using rule 27 (term -> term / factor .)
    BREAK           reduce using rule 27 (term -> term / factor .)
    VARIABLE        reduce using rule 27 (term -> term / factor .)
    PRINT           reduce using rule 27 (term -> term / factor .)
    WHILE           reduce using rule 27 (term -> term / factor .)
    FOR             reduce using rule 27 (term -> term / factor .)
    IF              reduce using rule 27 (term -> term / factor .)
    $end            reduce using rule 27 (term -> term / factor .)
    }               reduce using rule 27 (term -> term / factor .)
    )               reduce using rule 27 (term -> term / factor .)


state 89

    (21) expr -> expr + term .
    (26) term -> term . * factor
    (27) term -> term . / factor

    +               reduce using rule 21 (expr -> expr + term .)
    -               reduce using rule 21 (expr -> expr + term .)
    DIV             reduce using rule 21 (expr -> expr + term .)
    BREAK           reduce using rule 21 (expr -> expr + term .)
    VARIABLE        reduce using rule 21 (expr -> expr + term .)
    PRINT           reduce using rule 21 (expr -> expr + term .)
    WHILE           reduce using rule 21 (expr -> expr + term .)
    FOR             reduce using rule 21 (expr -> expr + term .)
    IF              reduce using rule 21 (expr -> expr + term .)
    $end            reduce using rule 21 (expr -> expr + term .)
    }               reduce using rule 21 (expr -> expr + term .)
    ]               reduce using rule 21 (expr -> expr + term .)
    )               reduce using rule 21 (expr -> expr + term .)
    *               shift and go to state 62
    /               shift and go to state 63


state 90

    (22) expr -> expr - term .
    (26) term -> term . * factor
    (27) term -> term . / factor

    +               reduce using rule 22 (expr -> expr - term .)
    -               reduce using rule 22 (expr -> expr - term .)
    DIV             reduce using rule 22 (expr -> expr - term .)
    BREAK           reduce using rule 22 (expr -> expr - term .)
    VARIABLE        reduce using rule 22 (expr -> expr - term .)
    PRINT           reduce using rule 22 (expr -> expr - term .)
    WHILE           reduce using rule 22 (expr -> expr - term .)
    FOR             reduce using rule 22 (expr -> expr - term .)
    IF              reduce using rule 22 (expr -> expr - term .)
    $end            reduce using rule 22 (expr -> expr - term .)
    }               reduce using rule 22 (expr -> expr - term .)
    ]               reduce using rule 22 (expr -> expr - term .)
    )               reduce using rule 22 (expr -> expr - term .)
    *               shift and go to state 62
    /               shift and go to state 63


state 91

    (12) assignment -> VARIABLE [ expr ] = . NUMBER
    (20) operation -> VARIABLE [ expr ] = . expr
    (21) expr -> . expr + term
    (22) expr -> . expr - term
    (23) expr -> . expr DIV expr
    (24) expr -> . term
    (25) expr -> . LEN ( factor )
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    NUMBER          shift and go to state 107
    LEN             shift and go to state 40
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    expr                           shift and go to state 106
    term                           shift and go to state 38
    factor                         shift and go to state 41

state 92

    (23) expr -> expr DIV expr .
    (21) expr -> expr . + term
    (22) expr -> expr . - term
    (23) expr -> expr . DIV expr

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    BREAK           reduce using rule 23 (expr -> expr DIV expr .)
    VARIABLE        reduce using rule 23 (expr -> expr DIV expr .)
    PRINT           reduce using rule 23 (expr -> expr DIV expr .)
    WHILE           reduce using rule 23 (expr -> expr DIV expr .)
    FOR             reduce using rule 23 (expr -> expr DIV expr .)
    IF              reduce using rule 23 (expr -> expr DIV expr .)
    $end            reduce using rule 23 (expr -> expr DIV expr .)
    }               reduce using rule 23 (expr -> expr DIV expr .)
    ]               reduce using rule 23 (expr -> expr DIV expr .)
    )               reduce using rule 23 (expr -> expr DIV expr .)
    +               shift and go to state 64
    -               shift and go to state 65
    DIV             shift and go to state 67

  ! +               [ reduce using rule 23 (expr -> expr DIV expr .) ]
  ! -               [ reduce using rule 23 (expr -> expr DIV expr .) ]
  ! DIV             [ reduce using rule 23 (expr -> expr DIV expr .) ]


state 93

    (25) expr -> LEN ( factor . )

    )               shift and go to state 108


state 94

    (14) assignment -> VARIABLE = VARIABLE [ expr . ]
    (31) factor -> VARIABLE [ expr . ]
    (21) expr -> expr . + term
    (22) expr -> expr . - term
    (23) expr -> expr . DIV expr

    ]               shift and go to state 109
    +               shift and go to state 64
    -               shift and go to state 65
    DIV             shift and go to state 67


state 95

    (16) num_list -> [ numbers ] .

    ;               reduce using rule 16 (num_list -> [ numbers ] .)
    BREAK           reduce using rule 16 (num_list -> [ numbers ] .)
    VARIABLE        reduce using rule 16 (num_list -> [ numbers ] .)
    PRINT           reduce using rule 16 (num_list -> [ numbers ] .)
    WHILE           reduce using rule 16 (num_list -> [ numbers ] .)
    FOR             reduce using rule 16 (num_list -> [ numbers ] .)
    IF              reduce using rule 16 (num_list -> [ numbers ] .)
    $end            reduce using rule 16 (num_list -> [ numbers ] .)
    }               reduce using rule 16 (num_list -> [ numbers ] .)


state 96

    (18) numbers -> numbers , . NUMBER

    NUMBER          shift and go to state 110


state 97

    (40) if -> IF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    statements                     shift and go to state 111
    if_elif_else                   shift and go to state 16
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 98

    (31) factor -> VARIABLE [ expr ] .

    >               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    <               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    LE              reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    GE              reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    )               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    *               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    /               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    ]               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    +               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    -               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    DIV             reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    BREAK           reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    VARIABLE        reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    PRINT           reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    WHILE           reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    FOR             reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    IF              reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    $end            reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    }               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    ;               reduce using rule 31 (factor -> VARIABLE [ expr ] .)


state 99

    (43) while -> WHILE ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    }               shift and go to state 112
    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    if_elif_else                   shift and go to state 16
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    statement                      shift and go to state 17
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 100

    (42) else -> ELSE { statements } .

    BREAK           reduce using rule 42 (else -> ELSE { statements } .)
    VARIABLE        reduce using rule 42 (else -> ELSE { statements } .)
    PRINT           reduce using rule 42 (else -> ELSE { statements } .)
    WHILE           reduce using rule 42 (else -> ELSE { statements } .)
    FOR             reduce using rule 42 (else -> ELSE { statements } .)
    IF              reduce using rule 42 (else -> ELSE { statements } .)
    $end            reduce using rule 42 (else -> ELSE { statements } .)
    }               reduce using rule 42 (else -> ELSE { statements } .)


state 101

    (41) elif -> ELIF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    statements                     shift and go to state 113
    if_elif_else                   shift and go to state 16
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 102

    (45) conditions -> assignment ; condition ; . increment
    (46) increment -> . VARIABLE INC

    VARIABLE        shift and go to state 115

    increment                      shift and go to state 114

state 103

    (12) assignment -> VARIABLE [ expr ] . = NUMBER

    =               shift and go to state 116


state 104

    (14) assignment -> VARIABLE = VARIABLE [ . expr ]
    (21) expr -> . expr + term
    (22) expr -> . expr - term
    (23) expr -> . expr DIV expr
    (24) expr -> . term
    (25) expr -> . LEN ( factor )
    (26) term -> . term * factor
    (27) term -> . term / factor
    (28) term -> . factor
    (29) factor -> . NUMBER
    (30) factor -> . VARIABLE
    (31) factor -> . VARIABLE [ expr ]
    (32) factor -> . ( expr )

    LEN             shift and go to state 40
    NUMBER          shift and go to state 27
    VARIABLE        shift and go to state 29
    (               shift and go to state 26

    expr                           shift and go to state 117
    term                           shift and go to state 38
    factor                         shift and go to state 41

state 105

    (44) for -> FOR ( conditions ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    }               shift and go to state 118
    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    if_elif_else                   shift and go to state 16
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    statement                      shift and go to state 17
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 106

    (20) operation -> VARIABLE [ expr ] = expr .
    (21) expr -> expr . + term
    (22) expr -> expr . - term
    (23) expr -> expr . DIV expr

    BREAK           reduce using rule 20 (operation -> VARIABLE [ expr ] = expr .)
    VARIABLE        reduce using rule 20 (operation -> VARIABLE [ expr ] = expr .)
    PRINT           reduce using rule 20 (operation -> VARIABLE [ expr ] = expr .)
    WHILE           reduce using rule 20 (operation -> VARIABLE [ expr ] = expr .)
    FOR             reduce using rule 20 (operation -> VARIABLE [ expr ] = expr .)
    IF              reduce using rule 20 (operation -> VARIABLE [ expr ] = expr .)
    $end            reduce using rule 20 (operation -> VARIABLE [ expr ] = expr .)
    }               reduce using rule 20 (operation -> VARIABLE [ expr ] = expr .)
    +               shift and go to state 64
    -               shift and go to state 65
    DIV             shift and go to state 67


state 107

    (12) assignment -> VARIABLE [ expr ] = NUMBER .
    (29) factor -> NUMBER .

  ! reduce/reduce conflict for BREAK resolved using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
  ! reduce/reduce conflict for PRINT resolved using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
  ! reduce/reduce conflict for } resolved using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
    }               reduce using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
    BREAK           reduce using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
    VARIABLE        reduce using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
    PRINT           reduce using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
    WHILE           reduce using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
    FOR             reduce using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
    IF              reduce using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
    $end            reduce using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)
    *               reduce using rule 29 (factor -> NUMBER .)
    /               reduce using rule 29 (factor -> NUMBER .)
    +               reduce using rule 29 (factor -> NUMBER .)
    -               reduce using rule 29 (factor -> NUMBER .)
    DIV             reduce using rule 29 (factor -> NUMBER .)

  ! BREAK           [ reduce using rule 29 (factor -> NUMBER .) ]
  ! VARIABLE        [ reduce using rule 29 (factor -> NUMBER .) ]
  ! PRINT           [ reduce using rule 29 (factor -> NUMBER .) ]
  ! WHILE           [ reduce using rule 29 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 29 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 29 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 29 (factor -> NUMBER .) ]
  ! }               [ reduce using rule 29 (factor -> NUMBER .) ]


state 108

    (25) expr -> LEN ( factor ) .

    +               reduce using rule 25 (expr -> LEN ( factor ) .)
    -               reduce using rule 25 (expr -> LEN ( factor ) .)
    DIV             reduce using rule 25 (expr -> LEN ( factor ) .)
    BREAK           reduce using rule 25 (expr -> LEN ( factor ) .)
    VARIABLE        reduce using rule 25 (expr -> LEN ( factor ) .)
    PRINT           reduce using rule 25 (expr -> LEN ( factor ) .)
    WHILE           reduce using rule 25 (expr -> LEN ( factor ) .)
    FOR             reduce using rule 25 (expr -> LEN ( factor ) .)
    IF              reduce using rule 25 (expr -> LEN ( factor ) .)
    $end            reduce using rule 25 (expr -> LEN ( factor ) .)
    }               reduce using rule 25 (expr -> LEN ( factor ) .)
    ]               reduce using rule 25 (expr -> LEN ( factor ) .)
    )               reduce using rule 25 (expr -> LEN ( factor ) .)


state 109

    (14) assignment -> VARIABLE = VARIABLE [ expr ] .
    (31) factor -> VARIABLE [ expr ] .

  ! reduce/reduce conflict for BREAK resolved using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
  ! reduce/reduce conflict for PRINT resolved using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
  ! reduce/reduce conflict for IF resolved using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
  ! reduce/reduce conflict for $end resolved using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
  ! reduce/reduce conflict for } resolved using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
    }               reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
    BREAK           reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
    VARIABLE        reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
    PRINT           reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
    WHILE           reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
    FOR             reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
    IF              reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
    $end            reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)
    *               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    /               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    +               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    -               reduce using rule 31 (factor -> VARIABLE [ expr ] .)
    DIV             reduce using rule 31 (factor -> VARIABLE [ expr ] .)

  ! BREAK           [ reduce using rule 31 (factor -> VARIABLE [ expr ] .) ]
  ! VARIABLE        [ reduce using rule 31 (factor -> VARIABLE [ expr ] .) ]
  ! PRINT           [ reduce using rule 31 (factor -> VARIABLE [ expr ] .) ]
  ! WHILE           [ reduce using rule 31 (factor -> VARIABLE [ expr ] .) ]
  ! FOR             [ reduce using rule 31 (factor -> VARIABLE [ expr ] .) ]
  ! IF              [ reduce using rule 31 (factor -> VARIABLE [ expr ] .) ]
  ! $end            [ reduce using rule 31 (factor -> VARIABLE [ expr ] .) ]
  ! }               [ reduce using rule 31 (factor -> VARIABLE [ expr ] .) ]


state 110

    (18) numbers -> numbers , NUMBER .

    ]               reduce using rule 18 (numbers -> numbers , NUMBER .)
    ,               reduce using rule 18 (numbers -> numbers , NUMBER .)


state 111

    (40) if -> IF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    }               shift and go to state 119
    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    if_elif_else                   shift and go to state 16
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    statement                      shift and go to state 17
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 112

    (43) while -> WHILE ( condition ) { statements } .

    BREAK           reduce using rule 43 (while -> WHILE ( condition ) { statements } .)
    VARIABLE        reduce using rule 43 (while -> WHILE ( condition ) { statements } .)
    PRINT           reduce using rule 43 (while -> WHILE ( condition ) { statements } .)
    WHILE           reduce using rule 43 (while -> WHILE ( condition ) { statements } .)
    FOR             reduce using rule 43 (while -> WHILE ( condition ) { statements } .)
    IF              reduce using rule 43 (while -> WHILE ( condition ) { statements } .)
    $end            reduce using rule 43 (while -> WHILE ( condition ) { statements } .)
    }               reduce using rule 43 (while -> WHILE ( condition ) { statements } .)


state 113

    (41) elif -> ELIF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if_elif_else
    (8) statement -> . while
    (9) statement -> . for
    (10) statement -> . BREAK
    (11) assignment -> . VARIABLE = NUMBER
    (12) assignment -> . VARIABLE [ expr ] = NUMBER
    (13) assignment -> . VARIABLE = VARIABLE
    (14) assignment -> . VARIABLE = VARIABLE [ expr ]
    (15) assignment -> . VARIABLE = num_list
    (19) operation -> . VARIABLE = expr
    (20) operation -> . VARIABLE [ expr ] = expr
    (33) print -> . PRINT ( VARIABLE )
    (38) if_elif_else -> . if
    (39) if_elif_else -> . if elif else
    (43) while -> . WHILE ( condition ) { statements }
    (44) for -> . FOR ( conditions ) { statements }
    (40) if -> . IF ( condition ) { statements }

    }               shift and go to state 120
    BREAK           shift and go to state 14
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 3
    WHILE           shift and go to state 2
    FOR             shift and go to state 10
    IF              shift and go to state 13

    if_elif_else                   shift and go to state 16
    for                            shift and go to state 6
    assignment                     shift and go to state 11
    while                          shift and go to state 15
    statement                      shift and go to state 17
    print                          shift and go to state 9
    operation                      shift and go to state 4
    if                             shift and go to state 5

state 114

    (45) conditions -> assignment ; condition ; increment .

    )               reduce using rule 45 (conditions -> assignment ; condition ; increment .)


state 115

    (46) increment -> VARIABLE . INC

    INC             shift and go to state 121


state 116

    (12) assignment -> VARIABLE [ expr ] = . NUMBER

    NUMBER          shift and go to state 122


state 117

    (14) assignment -> VARIABLE = VARIABLE [ expr . ]
    (21) expr -> expr . + term
    (22) expr -> expr . - term
    (23) expr -> expr . DIV expr

    ]               shift and go to state 123
    +               shift and go to state 64
    -               shift and go to state 65
    DIV             shift and go to state 67


state 118

    (44) for -> FOR ( conditions ) { statements } .

    }               reduce using rule 44 (for -> FOR ( conditions ) { statements } .)
    BREAK           reduce using rule 44 (for -> FOR ( conditions ) { statements } .)
    VARIABLE        reduce using rule 44 (for -> FOR ( conditions ) { statements } .)
    PRINT           reduce using rule 44 (for -> FOR ( conditions ) { statements } .)
    WHILE           reduce using rule 44 (for -> FOR ( conditions ) { statements } .)
    FOR             reduce using rule 44 (for -> FOR ( conditions ) { statements } .)
    IF              reduce using rule 44 (for -> FOR ( conditions ) { statements } .)
    $end            reduce using rule 44 (for -> FOR ( conditions ) { statements } .)


state 119

    (40) if -> IF ( condition ) { statements } .

    ELIF            reduce using rule 40 (if -> IF ( condition ) { statements } .)
    }               reduce using rule 40 (if -> IF ( condition ) { statements } .)
    BREAK           reduce using rule 40 (if -> IF ( condition ) { statements } .)
    VARIABLE        reduce using rule 40 (if -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 40 (if -> IF ( condition ) { statements } .)
    WHILE           reduce using rule 40 (if -> IF ( condition ) { statements } .)
    FOR             reduce using rule 40 (if -> IF ( condition ) { statements } .)
    IF              reduce using rule 40 (if -> IF ( condition ) { statements } .)
    $end            reduce using rule 40 (if -> IF ( condition ) { statements } .)


state 120

    (41) elif -> ELIF ( condition ) { statements } .

    ELSE            reduce using rule 41 (elif -> ELIF ( condition ) { statements } .)


state 121

    (46) increment -> VARIABLE INC .

    )               reduce using rule 46 (increment -> VARIABLE INC .)


state 122

    (12) assignment -> VARIABLE [ expr ] = NUMBER .

    ;               reduce using rule 12 (assignment -> VARIABLE [ expr ] = NUMBER .)


state 123

    (14) assignment -> VARIABLE = VARIABLE [ expr ] .

    ;               reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ expr ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 92 resolved as shift
WARNING: shift/reduce conflict for - in state 92 resolved as shift
WARNING: shift/reduce conflict for DIV in state 92 resolved as shift
WARNING: reduce/reduce conflict in state 43 resolved using rule (assignment -> VARIABLE = NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 43
WARNING: reduce/reduce conflict in state 44 resolved using rule (assignment -> VARIABLE = VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 44
WARNING: reduce/reduce conflict in state 107 resolved using rule (assignment -> VARIABLE [ expr ] = NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 107
WARNING: reduce/reduce conflict in state 109 resolved using rule (assignment -> VARIABLE = VARIABLE [ expr ])
WARNING: rejected rule (factor -> VARIABLE [ expr ]) in state 109
